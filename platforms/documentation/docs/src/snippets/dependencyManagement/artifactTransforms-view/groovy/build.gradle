import org.gradle.api.artifacts.transform.TransformAction
import org.gradle.api.artifacts.transform.TransformOutputs
import org.gradle.api.artifacts.transform.TransformParameters
import org.gradle.api.file.FileSystemLocation
import org.gradle.api.provider.Provider
import org.gradle.api.attributes.Attribute
import org.gradle.api.artifacts.type.ArtifactTypeDefinition

plugins {
    id 'java'
}

repositories {
    mavenCentral()
}

// tag::artifact-views[]
abstract class TestTransform implements TransformAction<TransformParameters.None> {
    @InputArtifact
    abstract Provider<FileSystemLocation> getInputArtifact()

    @Override
    void transform(TransformOutputs outputs) {
        def outputFile = outputs.file("transformed-stub.txt")
        outputFile.text = "Transformed from ${inputArtifact.get().asFile.name}"
    }
}

// Register the transform
dependencies {
    registerTransform(TestTransform) {
        from.attribute(ArtifactTypeDefinition.ARTIFACT_TYPE_ATTRIBUTE, "jar")
        to.attribute(ArtifactTypeDefinition.ARTIFACT_TYPE_ATTRIBUTE, "stub")
    }
}

// Define a configuration to resolve the transformed artifact
def consumer = configurations.create("consumer") {
    canBeConsumed = false
    canBeResolved = true
    transitive = false

    dependencies.add(project.dependencies.create("org.gradle.profiler:gradle-profiler:0.21.0"))

    attributes {
        attribute(ArtifactTypeDefinition.ARTIFACT_TYPE_ATTRIBUTE, "stub")
    }
}

// Task to resolve and display transformed artifact information
tasks.register("testArtifact") {
    def resolvedArtifacts = consumer.incoming.artifacts.artifactFiles

    doLast {
        println("Transformed artifacts:")
        resolvedArtifacts.files.each {
            println("- ${it.absolutePath}")
        }
    }
}
// end::artifact-views[]
